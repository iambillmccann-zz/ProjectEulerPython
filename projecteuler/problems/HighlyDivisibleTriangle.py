import math

from projecteuler.mathlibrary import MathLibrary
from .IEulerSolution import IEulerSolution

class HighlyDivisibleTriangle(IEulerSolution):
    """
    Solution to problem 12
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
    """

    def __init__(self, problem_number = None):
        IEulerSolution.__init__(self)

    def compute(self):

        # First allocate the variable and matrix
        done = False
        sequence = 1
        triangle = 0
        minimum = 500
        lowest_possible = MathLibrary.square(minimum / 2)

        while not done:
            triangle += sequence
            if triangle >= lowest_possible:
                if len(MathLibrary.get_divisors(triangle)) > minimum: done = True
            sequence += 1

        return triangle